{"version":3,"sources":["assets/columns.js","Components/SelectedRow/SelectedRow.js","Components/ChooseDataLength/ChooseDataLength.js","Components/AddDataRow/AddDataRow.js","App.js","serviceWorker.js","index.js"],"names":["columns","Header","accessor","SelectedRow","state","text","props","data","description","className","this","firstName","lastName","value","rows","onChange","e","setState","target","address","streetAddress","city","zip","nextProps","prevState","Component","ChooseDataLength","currentSelect","handleSelectChange","handleSelectSubmit","url","preventDefault","fetchData","onSubmit","type","AddDataRow","id","email","phone","expand","handleRowAdd","addRowData","handleChange","toggleForm","onClick","disabled","htmlFor","App","filteredData","selected","searchInput","isLoading","fetch","then","res","json","handleFilterChange","targetValue","undefined","globalSearch","selectRow","rowInfo","row","_original","filter","toString","includes","toLowerCase","match","join","newData","length","placeholder","defaultPageSize","pageSizeOptions","getTrProps","defaultSorted","desc","pageText","rowsText","previousText","nextText","noDataText","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.645e215c.chunk.js","sourcesContent":["const columns = [\r\n  {\r\n    Header: \"Id\",\r\n    accessor: \"id\"\r\n  },\r\n  {\r\n    Header: \"First Name\",\r\n    accessor: \"firstName\"\r\n  },\r\n  {\r\n    Header: \"Last Name\",\r\n    accessor: \"lastName\"\r\n  },\r\n  {\r\n    Header: \"Email\",\r\n    accessor: \"email\"\r\n  },\r\n  {\r\n    Header: \"Phone\",\r\n    accessor: \"phone\"\r\n  }\r\n];\r\n\r\nexport default columns;\r\n","import React, { Component } from \"react\";\r\nimport \"./SelectedRow.scss\";\r\n\r\nclass SelectedRow extends Component {\r\n  state = {\r\n    text: this.props.data.description\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.data.description !== prevState.text) {\r\n      return { text: nextProps.data.description || \"\" };\r\n    } else return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"selected-row\">\r\n        <p>\r\n          Выбран пользователь{\" \"}\r\n          <b>{`${this.props.data.firstName} ${this.props.data.lastName}`}</b>\r\n        </p>\r\n        <p>Описание:</p>\r\n        <textarea\r\n          value={this.state.text}\r\n          rows={30}\r\n          onChange={e => this.setState({ text: e.target.value })}\r\n        ></textarea>\r\n        <p>\r\n          Адрес проживания:{\" \"}\r\n          <b>\r\n            {this.props.data.address\r\n              ? this.props.data.address.streetAddress\r\n              : \"Неизвестно\"}\r\n          </b>\r\n        </p>\r\n        <p>\r\n          Город:{\" \"}\r\n          <b>\r\n            {this.props.data.address\r\n              ? this.props.data.address.city\r\n              : \"Неизвестно\"}\r\n          </b>\r\n        </p>\r\n        <p>\r\n          Провинция/штат:{\" \"}\r\n          <b>\r\n            {this.props.data.address\r\n              ? this.props.data.address.state\r\n              : \"Неизвестно\"}\r\n          </b>\r\n        </p>\r\n        <p>\r\n          Индекс:{\" \"}\r\n          <b>\r\n            {this.props.data.address\r\n              ? this.props.data.address.zip\r\n              : \"Неизвестно\"}\r\n          </b>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectedRow;\r\n","import React, { Component } from \"react\";\r\nimport \"./ChooseDataLength.scss\";\r\n\r\nclass ChooseDataLength extends Component {\r\n  state = {\r\n    currentSelect: \"32 строки\"\r\n  };\r\n\r\n  handleSelectChange = e => {\r\n    this.setState({ currentSelect: e.target.currentSelect });\r\n  };\r\n\r\n  handleSelectSubmit = e => {\r\n    e.preventDefault();\r\n    let url;\r\n    if (this.state.currentSelect === \"32 строки\") {\r\n      url =\r\n        \"https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\r\n    } else {\r\n      url =\r\n        \"https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\r\n    }\r\n    this.props.fetchData(url);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSelectSubmit}>\r\n        <label>\r\n          Выберите объем данных для таблицы:\r\n          <select\r\n            value={this.state.currentSelect}\r\n            onChange={this.handleSelectChange}\r\n          >\r\n            <option value=\"32 строки\">32 строки</option>\r\n            <option value=\"1000 строк\">1000 строк</option>\r\n          </select>\r\n        </label>\r\n        <input type=\"submit\" value=\"Подтвердить\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChooseDataLength;\r\n","import React, { Component } from \"react\";\r\nimport \"./AddDataRow.scss\";\r\n\r\nclass AddDataRow extends Component {\r\n  state = {\r\n    id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    expand: false\r\n  };\r\n\r\n  handleRowAdd = () => {\r\n    const { id, firstName, lastName, email, phone } = this.state;\r\n    this.props.addRowData({ id, firstName, lastName, email, phone });\r\n    this.setState({\r\n      id: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      expand: false\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  toggleForm = () => {\r\n    this.setState({ expand: !this.state.expand });\r\n  };\r\n\r\n  render() {\r\n    const { id, firstName, lastName, email, phone, expand } = this.state;\r\n\r\n    if (!expand) {\r\n      return (\r\n        <button className=\"btn change-state\" onClick={this.toggleForm}>\r\n          Добавить\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <button className=\"btn change-state\" onClick={this.toggleForm}>\r\n          Отменить\r\n        </button>\r\n        <button\r\n          disabled={!id || !firstName || !lastName || !email || !phone}\r\n          onClick={this.handleRowAdd}\r\n          className=\"btn confirm\"\r\n        >\r\n          Добавить\r\n        </button>\r\n        <div className=\"input-fields\">\r\n          <label htmlFor=\"id\">Введите Id: </label>\r\n          <input\r\n            id=\"id\"\r\n            value={this.state.id}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <label htmlFor=\"firstName\">Введите имя: </label>\r\n          <input\r\n            id=\"firstName\"\r\n            value={this.state.firstName}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <label htmlFor=\"lastName\">Введите фамилию: </label>\r\n          <input\r\n            id=\"lastName\"\r\n            value={this.state.lastName}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <label htmlFor=\"email\">Введите email: </label>\r\n          <input\r\n            id=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <label htmlFor=\"phone\">Введите номер телефона: </label>\r\n          <input\r\n            id=\"phone\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddDataRow;\r\n","import React, { Component } from \"react\";\nimport ReactTable from \"react-table-v6\";\nimport columns from \"./assets/columns\";\nimport SelectedRow from \"./Components/SelectedRow/SelectedRow\";\nimport ChooseDataLength from \"./Components/ChooseDataLength/ChooseDataLength\";\nimport AddDataRow from \"./Components/AddDataRow/AddDataRow\";\nimport \"react-table-v6/react-table.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    filteredData: [],\n    selected: [],\n    searchInput: \"\",\n    isLoading: false\n  };\n\n  fetchData = url => {\n    this.setState({ isLoading: true });\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          data,\n          filteredData: data,\n          isLoading: false\n        });\n      });\n  };\n\n  handleFilterChange = e => {\n    const targetValue =\n      e === undefined ? this.state.searchInput : e.target.value;\n    this.setState({ searchInput: targetValue }, () => {\n      this.globalSearch();\n    });\n  };\n\n  selectRow = (state, rowInfo) => {\n    return {\n      onClick: () => {\n        if (rowInfo.row._original.email === this.state.selected.email) {\n          this.setState({\n            selected: []\n          });\n        } else {\n          this.setState({\n            selected: rowInfo.row._original\n          });\n        }\n      }\n    };\n  };\n\n  globalSearch = () => {\n    let { searchInput, data } = this.state;\n    let filteredData = data.filter(value => {\n      return (\n        value.id.toString().includes(searchInput) ||\n        value.firstName.toLowerCase().includes(searchInput.toLowerCase()) ||\n        value.lastName.toLowerCase().includes(searchInput.toLowerCase()) ||\n        value.email.toLowerCase().includes(searchInput.toLowerCase()) ||\n        value.phone\n          .match(/\\d+/g)\n          .join(\"\")\n          .includes(searchInput)\n      );\n    });\n    this.setState({ filteredData });\n  };\n\n  addRowData = data => {\n    const newData = [data, ...this.state.data];\n    this.setState({\n      data: newData\n    });\n    this.handleFilterChange();\n  };\n\n  render() {\n    let { searchInput, filteredData, data, isLoading } = this.state;\n\n    if (isLoading) {\n      return <h1 className=\"loader\">Идёт загрузка данных...</h1>;\n    }\n\n    if (!data.length) {\n      return <ChooseDataLength fetchData={this.fetchData} />;\n    }\n\n    return (\n      <>\n        <input\n          className=\"search\"\n          value={searchInput}\n          onChange={this.handleFilterChange}\n          placeholder=\"Найти\"\n        />\n        <AddDataRow addRowData={this.addRowData} />\n        <ReactTable\n          data={filteredData}\n          columns={columns}\n          defaultPageSize={10}\n          pageSizeOptions={[10, 25, 50]}\n          className=\"-striped -highlight\"\n          getTrProps={this.selectRow}\n          defaultSorted={[{ id: \"id\", desc: false }]}\n          pageText=\"Страница\"\n          rowsText=\"строк\"\n          previousText=\"Предыдущая\"\n          nextText=\"Следующая\"\n          noDataText=\"Строки не найдены\"\n        />\n        {this.state.selected.email ? (\n          <SelectedRow data={this.state.selected} />\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}